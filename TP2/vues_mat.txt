CREATE MATERIALIZED VIEW CLIENT_V
BUILD IMMEDIATE
REFRESH COMPLETE
ENABLE QUERY REWRITE as
Select distinct CLIENT.NUM,TRUNC(Months_between(FACTURE.DATE_ETABLI,CLIENT.DATE_NAIS)/12) as AGE,
case 
    when (TRUNC(Months_between(FACTURE.DATE_ETABLI,CLIENT.DATE_NAIS)/12))<30 then '<30 ans'
    when (TRUNC(Months_between(FACTURE.DATE_ETABLI,CLIENT.DATE_NAIS)/12))<45 then '30-45 ans'
    when (TRUNC(Months_between(FACTURE.DATE_ETABLI,CLIENT.DATE_NAIS)/12))<60 then '45-60 ans'
    when (TRUNC(Months_between(FACTURE.DATE_ETABLI,CLIENT.DATE_NAIS)/12))>=60 then '>60 ans'
end as groupeAge,
CLIENT.SEXE, substr(CLIENT.ADRESSE,(instr(CLIENT.ADRESSE,',',1,2))+1,((instr(CLIENT.ADRESSE,',',1,3)-(instr(CLIENT.ADRESSE,',',1,2))))-1) as VILLE,
substr(CLIENT.ADRESSE,instr(CLIENT.ADRESSE,',',1,3)+1,LENGTH(CLIENT.ADRESSE)-1) as PAYS,
substr(substr(CLIENT.ADRESSE,(instr(CLIENT.ADRESSE,',',1,1))+1,((instr(CLIENT.ADRESSE,',',1,2)-(instr(CLIENT.ADRESSE,',',1,1))))-1),1,2) as CP
FROM CLIENT JOIN FACTURE ON CLIENT.NUM=FACTURE.CLIENT
ORDER BY CLIENT.NUM;


CREATE MATERIALIZED VIEW TEMPS_V
BUILD IMMEDIATE
REFRESH COMPLETE as
SELECT FACTURE.DATE_ETABLI,to_char(FACTURE.DATE_ETABLI, 'DDD') as JOURANNEE, to_char(FACTURE.DATE_ETABLI, 'WW')as SEMAINEANNEE,extract(month from FACTURE.DATE_ETABLI) as MOIS, extract(year from FACTURE.DATE_ETABLI) as ANNEE 
FROM FACTURE,dual
GROUP BY FACTURE.DATE_ETABLI
ORDER BY FACTURE.DATE_ETABLI;

CREATE MATERIALIZED VIEW PRODUIT_V as
SELECT PRODUIT.NUM,
substr(PRODUIT.DESIGNATION,1,((instr(PRODUIT.DESIGNATION,'.',1,1))-1)) as NOM, substr(PRODUIT.DESIGNATION,(instr(PRODUIT.DESIGNATION,'.',1,1))+1,((instr(PRODUIT.DESIGNATION,'.',1,2)-(instr(PRODUIT.DESIGNATION,'.',1,1))))-1) as SOUSCATEGORIE,
case
    when (substr(PRODUIT.DESIGNATION,(instr(PRODUIT.DESIGNATION,'.',1,1))+1,((instr(PRODUIT.DESIGNATION,'.',1,2)-(instr(PRODUIT.DESIGNATION,'.',1,1))))-1)) is null then substr(PRODUIT.DESIGNATION,INSTR(PRODUIT.DESIGNATION,'.',1,1)+1,LENGTH(PRODUIT.DESIGNATION)-1)
    when (substr(PRODUIT.DESIGNATION,(instr(PRODUIT.DESIGNATION,'.',1,1))+1,((instr(PRODUIT.DESIGNATION,'.',1,2)-(instr(PRODUIT.DESIGNATION,'.',1,1))))-1)) is not null then substr(PRODUIT.DESIGNATION,INSTR(PRODUIT.DESIGNATION,'.',1,2)+1,LENGTH(PRODUIT.DESIGNATION)-1)
end as CATEGORIE
FROM PRODUIT;


CREATE MATERIALIZED VIEW PRIX_V as
SELECT PRIX_DATE.NUM, PRIX_DATE.PRIX, PRIX_DATE.REMISE
FROM PRIX_DATE;

CREATE MATERIALIZED VIEW FAIT_VENTE as
SELECT FACTURE.DATE_ETABLI as idTemps, LIGNE_FACTURE.PRODUIT as idProduit, FACTURE.CLIENT as idClient, CLIENT_V.AGE as AGE ,LIGNE_FACTURE.ID_PRIX as idPrix, LIGNE_FACTURE.QTE as QUANTITE, LIGNE_FACTURE.QTE * PRIX_DATE.PRIX as CA
FROM FACTURE JOIN LIGNE_FACTURE ON FACTURE.NUM = LIGNE_FACTURE.FACTURE JOIN PRIX_DATE ON LIGNE_FACTURE.ID_PRIX = PRIX_DATE.NUM JOIN CLIENT_V ON FACTURE.CLIENT = CLIENT_V.NUM;

ALTER TABLE FAIT_VENTE
ADD CONSTRAINT pk_faitvente PRIMARY KEY(idTemps,idProduit,idCLient,idPrix);

ALTER TABLE PRIX_V
ADD CONSTRAINT pk_prixv PRIMARY KEY (NUM);

ALTER TABLE FAIT_VENTE
ADD CONSTRAINT fk_idPrix FOREIGN KEY(idPrix) REFERENCES PRIX_V(NUM);

ALTER TABLE PRODUIT_V
ADD CONSTRAINT pk_produitv PRIMARY KEY (NUM);

ALTER TABLE FAIT_VENTE
ADD CONSTRAINT fk_idProduit FOREIGN KEY(idProduit) REFERENCES PRODUIT_V(NUM);

ALTER TABLE TEMPS_V
ADD CONSTRAINT pk_tempsv PRIMARY KEY(DATE_ETABLI);

ALTER TABLE FAIT_VENTE
ADD CONSTRAINT fk_idTemps FOREIGN KEY (idTemps) REFERENCES TEMPS_V(DATE_ETABLI);

ALTER TABLE CLIENT_V
ADD CONSTRAINT pk_clientv PRIMARY KEY(NUM,AGE);

ALTER TABLE FAIT_VENTE
ADD CONSTRAINT fk_idClient FOREIGN KEY (idClient,age) REFERENCES CLIENT_V(NUM,AGE);

-- CREATION DES DIMENSIONS --
CREATE DIMENSION produits_dimension
LEVEL PRODUIT IS (PRODUIT_V.NUM)
LEVEL SOUSCATEGORIE IS (PRODUIT_V.SOUSCATEGORIE)
LEVEL CATEGORIE IS (PRODUIT_V.CATEGORIE)
HIERARCHY produits_rollup (
PRODUIT CHILD OF SOUSCATEGORIE CHILD OF CATEGORIE
);

EXECUTE DBMS_DIMENSION.VALIDATE_DIMENSION ('PRODUITS_DIMENSION', FALSE, TRUE, 'test dim prod'); 

CREATE DIMENSION client_dimension
LEVEL CLIENT IS (CLIENT_V.NUM,CLIENT_V.AGE)
LEVEL GROUPEAGE IS (CLIENT_V.GROUPEAGE)
LEVEL VILLE IS (CLIENT_V.VILLE)
LEVEL CP IS (CLIENT_V.CP)
LEVEL PAYS IS (CLIENT_V.PAYS)
HIERARCHY ageClient_rollup (
CLIENT CHILD OF GROUPEAGE
)
HIERARCHY localisationClient (
VILLE CHILD OF CP CHILD OF PAYS
);

EXECUTE DBMS_DIMENSION.VALIDATE_DIMENSION ('CLIENT_DIMENSION', FALSE, TRUE, 'test dim client'); 

CREATE DIMENSION temps_dimension
LEVEL DATE_ETABLI IS (TEMPS_V.DATE_ETABLI)
LEVEL MOIS IS (TEMPS_V.MOIS)
LEVEL ANNEE IS (TEMPS_V.ANNEE)
HIERARCHY temps_rollup (
DATE_ETABLI CHILD OF MOIS CHILD OF ANNEE
);

EXECUTE DBMS_DIMENSION.VALIDATE_DIMENSION ('TEMPS_DIMENSION', FALSE, TRUE, 'test dim temps');


-- Questions d'exploitation --
--1--
SELECT PRODUIT_V.NOM,SUM(FAIT_VENTE.CA) as CA
FROM FAIT_VENTE JOIN PRODUIT_V ON FAIT_VENTE.IDPRODUIT = PRODUIT_V.NUM
GROUP BY PRODUIT_V.NUM,PRODUIT_V.NOM;

--2--
SELECT PRODUIT_V.CATEGORIE,TEMPS_V.MOIS,SUM(FAIT_VENTE.CA) as CA
FROM FAIT_VENTE JOIN PRODUIT_V ON FAIT_VENTE.IDPRODUIT = PRODUIT_V.NUM JOIN TEMPS_V ON FAIT_VENTE.IDTEMPS = TEMPS_V.DATE_ETABLI
GROUP BY GROUPING SETS((PRODUIT_V.CATEGORIE,TEMPS_V.MOIS),(PRODUIT_V.CATEGORIE),());

--3--
SELECT CLIENT_V.GROUPEAGE,SUM(FAIT_VENTE.CA) as CA,rank() over(order by SUM(FAIT_VENTE.CA) desc) as rank
FROM  CLIENT_V NATURAL JOIN FAIT_VENTE
GROUP BY CLIENT_V.GROUPEAGE;

--4--
SELECT NOM,CA FROM(
SELECT PRODUIT_V.NOM,SUM(FAIT_VENTE.QUANTITE) as CA, rank() over(order by SUM(FAIT_VENTE.QUANTITE) desc) as rank
FROM PRODUIT_V JOIN FAIT_VENTE ON PRODUIT_V.NUM = FAIT_VENTE.IDPRODUIT
GROUP BY PRODUIT_V.NUM,PRODUIT_V.NOM)
WHERE RANK in (1,2,3);
